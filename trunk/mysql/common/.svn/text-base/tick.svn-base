BEGIN

  DECLARE iPoint      INT;
  DECLARE vError      VARCHAR (200);
  DECLARE vDebug      VARCHAR (100);
  DECLARE iMinute     INT;
  DECLARE iLastMinute INT;
  DECLARE dtLastDate  DATETIME;
  DECLARE dMax        DOUBLE;
  DECLARE dMin        DOUBLE;
  DECLARE dOpen       DOUBLE;
  DECLARE dClose      DOUBLE;
  DECLARE iBar        INT;


  DECLARE EXIT HANDLER
  FOR SQLEXCEPTION, SQLWARNING, NOT FOUND
  BEGIN
    ROLLBACK;
    INSERT INTO `error_log` (`id`, `account_id`, `procedure`, `query`, `dump`, `timestamp`) VALUES (NULL, 0, 'tick', vError, CONCAT_WS(',', dPrice, iPoint, iMinute, iLastMinute, dtLastDate, dMax, dMin, dOpen, dClose, iBar), NULL);
    set vDebug = CONCAT("Error ID: ", (SELECT last_insert_id()));
  END;

  START TRANSACTION;

  SET vDebug = "OK";
  SET vError = "SELECT `point` FROM `config` WHERE `status` = 'active'";
  SET iPoint = (SELECT
    `point`
  FROM
    `config`
  WHERE
    `status` = 'active');

  SET vError = "SELECT `timestamp` FROM `config` WHERE `status` = 'active'";
  SET dtLastDate = (SELECT
    `timestamp`
  FROM
    `config`
  WHERE
    `status` = 'active');

  SET vError = "Minutes";
  SET iMinute = EXTRACT(MINUTE FROM NOW());
  SET iLastMinute = EXTRACT(MINUTE FROM dtLastDate);
  IF NOT (iMinute = iLastMinute) THEN
    CALL new_minute();
  END IF;

  SET vError = "INSERT INTO `ticks` (`id`, `price`) VALUES (NULL, dPrice)";
  INSERT INTO `ticks` (`id`, `price`) VALUES (NULL, dPrice);

  SET vError = "UPDATE `orders` SET `profit` = ROUND((dPrice - `open_price`) * iPoint * `profit_per_point`) WHERE `status` = 'open' AND `type` = 'buy'";
  UPDATE
    `orders`, `accounts`
  SET
    `accounts`.`check` = 1, `orders`.`profit` = ROUND((dPrice - `open_price`) * iPoint * `profit_per_point`, 2)
  WHERE
    `status` = 'open' AND `type` = 'buy' AND `orders`.`account_id` = `accounts`.`id`;

  SET vError = "UPDATE `orders` SET `profit` = ROUND((`open_price` - dPrice) * iPoint * `profit_per_point`) WHERE `status` = 'open' AND `type` = 'sell'";
  UPDATE
    `orders`, `accounts`
  SET
    `accounts`.`check` = 1, `profit` = ROUND((`open_price` - dPrice) * iPoint * `profit_per_point`, 2)
  WHERE
    `status` = 'open' AND `type` = 'sell' AND `orders`.`account_id` = `accounts`.`id`;

  SET vError = "UPDATE `orders` SET `profit` = `lot` WHERE `profit`>`lot`";
  UPDATE
    `orders`
  SET
    `profit` = `lot`
  WHERE
    `profit` > `lot` AND `status` <> 'closed' AND (`game_type` = 1 OR `game_type` = 2);

  SET vError = "UPDATE `orders` SET `profit` = (-1)*`lot` WHERE `profit`<(-1)*`lot`";
  UPDATE
    `orders`
  SET
    `profit` = (-1) * `lot`
  WHERE
    `profit` < (-1) * `lot` AND `status` <> 'closed' AND (`game_type` = 1 OR `game_type` = 3);

  SET vError = "UPDATE `orders` SET `status` = 'closing' WHERE `status` = 'open' AND `type` = 'buy' AND (`take_profit` < dPrice OR `stop_loss` > dPrice)";
  UPDATE
    `orders`
  SET
    `status` = 'closing'
  WHERE
    `status` = 'open' AND `type` = 'buy'
    AND (NOT (`take_profit` > dPrice) OR NOT (`stop_loss` < dPrice));

  SET vError = "UPDATE `orders` SET `status` = 'closing' WHERE `status` = 'open' AND `type` = 'sell'   AND (`take_profit` > dPrice OR `stop_loss` < dPrice)";
  UPDATE
    `orders`
  SET
    `status` = 'closing'
  WHERE
    `status` = 'open' AND `type` = 'sell'
    AND (NOT (`take_profit` < dPrice) OR NOT (`stop_loss` > dPrice));


  SET vError = "UPDATE `accounts`, `orders` SET `order`='closed...";
  UPDATE
    `accounts`, `orders`
  SET
    `status` = 'msg', `accounts`.`balance` = `accounts`.`balance` + `orders`.`profit`, `orders`.`exited` = NOW(), `orders`.`close_price` = dPrice
  WHERE
    `accounts`.`id` = `orders`.`account_id` AND `orders`.`status` = 'closing';

  COMMIT;

  SET vError = "SELECT max(`id`) FROM `bars`";
  SET iBar = (SELECT
    MAX(`id`)
  FROM
    `bars`);


  SET vDebug = CONCAT(vDebug, ":", iBar, ":");
SELECT
    (CONCAT(vDebug)) AS vResult;
END
